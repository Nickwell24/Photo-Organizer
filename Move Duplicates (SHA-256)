# Read directories from user
$Path = Read-Host -Prompt 'Enter file path for searching duplicate files (e.g. C:\Temp, C:\)'
$DuplicateFileMoveLocation = Read-Host -Prompt 'Enter file path for storing duplicate files (e.g. C:\Temp, C:\)'

# Set error preference
$ErrorActionPreference = "Stop"

# Initialize a progress counter
$progressCounter = 0

# Define a helper function to write progress
function Write-ProgressMessage {
    param($current, $total, $message)
    Write-Progress -Activity $message -Status ("{0} of {1} completed" -f $current, $total) -PercentComplete (($current / $total) * 100)
}

# Collect files in directory
Write-Host "Scanning Files... "
$files = Get-ChildItem $Path -Recurse -File
$totalFiles = $files.Count

# Group files by length and filter out unique files
$lengthGroups = $files | Group-Object -Property Length | Where-Object Count -gt 1
$totalGroups = $lengthGroups.Count

# Create a list to store results
$duplicates = New-Object System.Collections.Generic.List[PSObject]

# Hash and compare files of same length
Write-Host "Starting to hash & compare files of exact length."
foreach ($group in $lengthGroups) {
    # Update progress
    $progressCounter++
    Write-ProgressMessage $progressCounter $totalGroups "Hashing and comparing files"

    # Hash files in current group and filter out unique hashes
    $hashGroups = $group.Group | Get-FileHash -Algorithm MD5 | Group-Object -Property Hash | Where-Object Count -gt 1

    # Add duplicates to results, skipping the first file in each group
    foreach ($hashGroup in $hashGroups) {
        $duplicates.AddRange(($hashGroup.Group | Select-Object -Skip 1))
    }
}

# Print duplicate statistics
Write-Host ("{0} duplicate files found out of {1} total. The duplicates will be moved to {2}." -f $duplicates.Count, $totalFiles, $DuplicateFileMoveLocation)

# Ask for user confirmation before moving files
$answer = Read-Host -Prompt "Do you want to Proceed (Y or N)?"
if ($answer -eq 'y') {
    # Ensure the destination directory exists
    if (!(Test-Path -Path $DuplicateFileMoveLocation)) {
        New-Item -Path $DuplicateFileMoveLocation -ItemType Directory | Out-Null
    }

    # Reset and reuse progress counter for moving files
    $progressCounter = 0
    $totalDuplicates = $duplicates.Count

    # Move duplicate files to new location, renaming if necessary
    foreach ($file in $duplicates) {
        # Update progress
        $progressCounter++
        Write-ProgressMessage $progressCounter $totalDuplicates "Moving duplicate files"

        # Determine destination file name, adding a number if a file with the same name already exists
        $destinationPath = Join-Path -Path $DuplicateFileMoveLocation -ChildPath $file.Name
        $fileBaseName = [IO.Path]::GetFileNameWithoutExtension($file.Name)
        $fileExtension = [IO.Path]::GetExtension($file.Name)
        $counter = 1
        while (Test-Path -Path $destinationPath) {
            $destinationPath = Join-Path -Path $DuplicateFileMoveLocation -ChildPath ("{0}_{1}{2}" -f $fileBaseName, $counter, $fileExtension)
            $counter++
        }

        # Move the file
        Move-Item -Path $file.Path -Destination $destinationPath
    }
}

Write-Host "* * * Completed Removing Duplicates * * *" 
Write-Host "Source: $Path"
Write-Host "Destination: $DuplicateFileMoveLocation"
